{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "requestedAmount",
          "type": "uint256"
        }
      ],
      "name": "getTerms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aprBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        },
        {
          "internalType": "uint128",
          "name": "maxAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "aprBps",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "minDuration",
          "type": "uint64"
        }
      ],
      "name": "setTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "termsOf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        },
        {
          "internalType": "uint128",
          "name": "maxAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "aprBps",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "minDuration",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d64350138284b9879e707c828de68e3d22aa94865e09d84fc54b700d8c0291d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "367685",
    "logsBloom": "0x
    "blockHash": "0xebdbaf6595e75e0aa6feb8ab9bce8df82eeb8043591d9fbe208b1fe07a2f9ed6",
    "transactionHash": "0x7d64350138284b9879e707c828de68e3d22aa94865e09d84fc54b700d8c0291d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3264837,
        "transactionHash": "0x7d64350138284b9879e707c828de68e3d22aa94865e09d84fc54b700d8c0291d",
        "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xebdbaf6595e75e0aa6feb8ab9bce8df82eeb8043591d9fbe208b1fe07a2f9ed6"
      }
    ],
    "blockNumber": 3264837,
    "cumulativeGasUsed": "367685",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "832242de6430dfb1f9095890bb8c97ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"name\":\"getTerms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aprBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"maxAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"aprBps\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"minDuration\",\"type\":\"uint64\"}],\"name\":\"setTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"termsOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"maxAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"aprBps\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"minDuration\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"getTerms(address,uint256)\":{\"details\":\"Return whether borrower is allowed, the max amount (in wei), APR in basis points (e.g. 1200 = 12% APR), and min duration (seconds).\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A simple oracle for testing/demo. Owner can whitelist borrowers with caps, apr and minimum duration.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CreditOracle.sol\":\"CreditOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CreditOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ICreditOracle.sol\\\";\\n\\n/// @notice A simple oracle for testing/demo.\\n/// Owner can whitelist borrowers with caps, apr and minimum duration.\\ncontract CreditOracle is ICreditOracle, Ownable {\\n    struct Terms { bool allowed; uint128 maxAmount; uint32 aprBps; uint64 minDuration; }\\n    mapping(address => Terms) public termsOf;\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    function setTerms(address borrower, bool allowed, uint128 maxAmount, uint32 aprBps, uint64 minDuration)\\n        external\\n        onlyOwner\\n    {\\n        termsOf[borrower] = Terms({allowed: allowed, maxAmount: maxAmount, aprBps: aprBps, minDuration: minDuration});\\n    }\\n\\n    function getTerms(address borrower, uint256 requestedAmount)\\n        external\\n        view\\n        override\\n        returns (bool allowed, uint256 maxAmount, uint256 aprBps, uint256 minDuration)\\n    {\\n        Terms memory t = termsOf[borrower];\\n        allowed = t.allowed && requestedAmount <= t.maxAmount;\\n        maxAmount = t.maxAmount;\\n        aprBps = t.aprBps;\\n        minDuration = t.minDuration;\\n    }\\n}\",\"keccak256\":\"0x8e41d61357e15c0182fe7a6a2be49f367e4bd42e740c70c6f81e8324bd08325a\",\"license\":\"MIT\"},\"contracts/ICreditOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/// @notice Credit oracle interface: implement your own logic off-chain/on-chain\\ninterface ICreditOracle {\\n    /// @dev Return whether borrower is allowed, the max amount (in wei),\\n    /// APR in basis points (e.g. 1200 = 12% APR), and min duration (seconds).\\n    function getTerms(address borrower, uint256 requestedAmount)\\n        external\\n        view\\n        returns (bool allowed, uint256 maxAmount, uint256 aprBps, uint256 minDuration);\\n}\",\"keccak256\":\"0x3a3a2f7ddb882225684b8d0d781d217d5c27288f7c63160979adac65006ac64c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610538806100a56000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630369ac9114610067578063715018a6146100fe5780638cf1376c146101085780638da5cb5b1461013d578063ba2e104614610158578063f2fde38b1461016b575b600080fd5b6100ba610075366004610420565b60016020526000908152604090205460ff81169061010081046001600160801b031690600160881b810463ffffffff1690600160a81b900467ffffffffffffffff1684565b6040805194151585526001600160801b03909316602085015263ffffffff9091169183019190915267ffffffffffffffff1660608201526080015b60405180910390f35b61010661017e565b005b61011b610116366004610442565b610192565b60408051941515855260208501939093529183015260608201526080016100f5565b6000546040516001600160a01b0390911681526020016100f5565b61010661016636600461046c565b610259565b610106610179366004610420565b610344565b610186610387565b61019060006103b4565b565b6001600160a01b03821660009081526001602090815260408083208151608081018352905460ff811615801580845261010083046001600160801b031695840195909552600160881b820463ffffffff1693830193909352600160a81b900467ffffffffffffffff166060820152839283928392919061021f575080602001516001600160801b03168611155b945080602001516001600160801b03169350806040015163ffffffff169250806060015167ffffffffffffffff1691505092959194509250565b610261610387565b6040805160808101825294151585526001600160801b03938416602080870191825263ffffffff94851687840190815267ffffffffffffffff948516606089019081526001600160a01b0399909916600090815260019092529290209551865491519251975170ffffffffffffffffffffffffffffffffff1990921690151570ffffffffffffffffffffffffffffffff001916176101009290951691909102939093176bffffffffffffffffffffffff60881b1916600160881b959092169490940267ffffffffffffffff60a81b191617600160a81b9190931602919091179055565b61034c610387565b6001600160a01b03811661037b57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610384816103b4565b50565b6000546001600160a01b031633146101905760405163118cdaa760e01b8152336004820152602401610372565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461041b57600080fd5b919050565b60006020828403121561043257600080fd5b61043b82610404565b9392505050565b6000806040838503121561045557600080fd5b61045e83610404565b946020939093013593505050565b600080600080600060a0868803121561048457600080fd5b61048d86610404565b9450602086013580151581146104a257600080fd5b935060408601356001600160801b03811681146104be57600080fd5b9250606086013563ffffffff811681146104d757600080fd5b9150608086013567ffffffffffffffff811681146104f457600080fd5b80915050929550929590935056fea26469706673582212208a8ea352ef74f7bef67a8323338a5ce4b8f19ad15a81f8b60bfd3fb1fa8e3bbb64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630369ac9114610067578063715018a6146100fe5780638cf1376c146101085780638da5cb5b1461013d578063ba2e104614610158578063f2fde38b1461016b575b600080fd5b6100ba610075366004610420565b60016020526000908152604090205460ff81169061010081046001600160801b031690600160881b810463ffffffff1690600160a81b900467ffffffffffffffff1684565b6040805194151585526001600160801b03909316602085015263ffffffff9091169183019190915267ffffffffffffffff1660608201526080015b60405180910390f35b61010661017e565b005b61011b610116366004610442565b610192565b60408051941515855260208501939093529183015260608201526080016100f5565b6000546040516001600160a01b0390911681526020016100f5565b61010661016636600461046c565b610259565b610106610179366004610420565b610344565b610186610387565b61019060006103b4565b565b6001600160a01b03821660009081526001602090815260408083208151608081018352905460ff811615801580845261010083046001600160801b031695840195909552600160881b820463ffffffff1693830193909352600160a81b900467ffffffffffffffff166060820152839283928392919061021f575080602001516001600160801b03168611155b945080602001516001600160801b03169350806040015163ffffffff169250806060015167ffffffffffffffff1691505092959194509250565b610261610387565b6040805160808101825294151585526001600160801b03938416602080870191825263ffffffff94851687840190815267ffffffffffffffff948516606089019081526001600160a01b0399909916600090815260019092529290209551865491519251975170ffffffffffffffffffffffffffffffffff1990921690151570ffffffffffffffffffffffffffffffff001916176101009290951691909102939093176bffffffffffffffffffffffff60881b1916600160881b959092169490940267ffffffffffffffff60a81b191617600160a81b9190931602919091179055565b61034c610387565b6001600160a01b03811661037b57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610384816103b4565b50565b6000546001600160a01b031633146101905760405163118cdaa760e01b8152336004820152602401610372565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461041b57600080fd5b919050565b60006020828403121561043257600080fd5b61043b82610404565b9392505050565b6000806040838503121561045557600080fd5b61045e83610404565b946020939093013593505050565b600080600080600060a0868803121561048457600080fd5b61048d86610404565b9450602086013580151581146104a257600080fd5b935060408601356001600160801b03811681146104be57600080fd5b9250606086013563ffffffff811681146104d757600080fd5b9150608086013567ffffffffffffffff811681146104f457600080fd5b80915050929550929590935056fea26469706673582212208a8ea352ef74f7bef67a8323338a5ce4b8f19ad15a81f8b60bfd3fb1fa8e3bbb64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getTerms(address,uint256)": {
        "details": "Return whether borrower is allowed, the max amount (in wei), APR in basis points (e.g. 1200 = 12% APR), and min duration (seconds)."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A simple oracle for testing/demo. Owner can whitelist borrowers with caps, apr and minimum duration.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/CreditOracle.sol:CreditOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1025,
        "contract": "contracts/CreditOracle.sol:CreditOracle",
        "label": "termsOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Terms)1020_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Terms)1020_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CreditOracle.Terms)",
        "numberOfBytes": "32",
        "value": "t_struct(Terms)1020_storage"
      },
      "t_struct(Terms)1020_storage": {
        "encoding": "inplace",
        "label": "struct CreditOracle.Terms",
        "members": [
          {
            "astId": 1013,
            "contract": "contracts/CreditOracle.sol:CreditOracle",
            "label": "allowed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1015,
            "contract": "contracts/CreditOracle.sol:CreditOracle",
            "label": "maxAmount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1017,
            "contract": "contracts/CreditOracle.sol:CreditOracle",
            "label": "aprBps",
            "offset": 17,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1019,
            "contract": "contracts/CreditOracle.sol:CreditOracle",
            "label": "minDuration",
            "offset": 21,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}